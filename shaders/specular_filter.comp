#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "sampling.h"

// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf

// This shaders filters a cubemap to get its specular part
// this uses the GGX model with...

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
//layout(local_size_variable) in;

layout(binding = 0) uniform samplerCube inputSampler;
layout(binding = 1, rgba32f) uniform imageCube outputImage;
layout(binding = 2) uniform filterInformation {
    float mipRoughness;
};

//////////////////////////////////////////////////////
// MAIN FUNCTION
//////////////////////////////////////////////////////
void main() {
    // ensure that we are working within the bounds of the image
    int outputImageSize = imageSize(outputImage).x;  // x and y are the same in a cubemap
    if (gl_GlobalInvocationID.x >= outputImageSize || gl_GlobalInvocationID.y >= outputImageSize)
        return;

    ivec3 pixel = ivec3(gl_GlobalInvocationID);
    vec3 N = pixelToDirection(pixel, outputImageSize);

    // build the local base of the main direction N
    vec3 U;
    vec3 V;
    buildBase(N, U, V, pixel.z);
    vec3 outputColor = vec3(0.0);
    float totalWeight = 0.0;

    const uint SAMPLES_COUNT = 4096;
    for (uint i = 0; i < SAMPLES_COUNT; ++i) {
        vec2 s = hammersley2D(i, SAMPLES_COUNT);
        vec3 samplingCoord = hemisphereSample_uniform(s.x, s.y);
        vec3 samplingDirection = samplingCoord.x * U + samplingCoord.y * V + samplingCoord.z * N;

        float NdotL = samplingCoord.z;  // U and V are normal to N
        if (NdotL >= 0.0) {
            outputColor += NdotL * texture(inputSampler, samplingDirection).rgb;
            totalWeight += NdotL;
        }
    }

    outputColor /= max(totalWeight, 0.0001);  // avoid dividing by 0
    imageStore(outputImage, pixel, vec4(outputColor, 1.0));
}