#version 450
#extension GL_ARB_separate_shader_objects : enable

#include "sampling.glsl"

// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf

// This shaders filters a cubemap to get its specular part
// this uses the GGX model with...

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
//layout(local_size_variable) in;

layout(binding = 0) uniform samplerCube inputSampler;
layout(binding = 1, rgba32f) uniform imageCube outputImage;
layout(push_constant) uniform filterInformation {
    float mipRoughness;
};

vec3 filter_specular(float roughness, vec3 N) {
    vec3 outputColor = vec3(0.0);
    float totalWeight = 0.0;
    //int mipCount = textureQueryLevels(inputSampler);

    const uint SAMPLES_COUNT = 4096;
    for (uint i = 0; i < SAMPLES_COUNT; ++i) {
        vec2 Xi = hammersley2D(i, SAMPLES_COUNT);
        vec3 H = localToWorldReferential(ImportanceSampleGGX(Xi, roughness), N);
        vec3 L = 2.0 * dot(N, H) * H - N;

        float NdotL = clamp(dot(N, L), 0.0, 1.0);
        if (NdotL >= 0.0) {
            //float NdotH = clamp(dot(N, H), 0.0, 1.0);
            //float LdotH = clamp(dot(L, H), 0.0, 1.0);
            //float pdf = _GGX_Divide_Pi()
            //float omegaS = 1.0 / (SAMPLES_COUNT * pdf);
            //float omegaP = 4.0 * PI / (6.0 * width * width) ;
            //float mipLevel = clamp(0.5 * log2 (omegaS / omegaP), 0, mipCount);
            outputColor += NdotL * textureLod(inputSampler, L, 0).rgb;
            totalWeight += NdotL;
        }
    }

    outputColor /= max(totalWeight, 0.0001);  // avoid dividing by 0
    return outputColor;
}

//////////////////////////////////////////////////////
// MAIN FUNCTION
//////////////////////////////////////////////////////
void main() {
    // ensure that we are working within the bounds of the image
    int outputImageSize = imageSize(outputImage).x;  // x and y are the same in a cubemap
    if (gl_GlobalInvocationID.x >= outputImageSize || gl_GlobalInvocationID.y >= outputImageSize)
        return;

    ivec3 pixel = ivec3(gl_GlobalInvocationID);
    vec3 N = pixelToDirection(pixel, outputImageSize);

    vec3 outputColor = vec3(0.0);
    if (mipRoughness == 0.0)
        outputColor = textureLod(inputSampler, N, 0).rgb;
    else
        outputColor = filter_specular(mipRoughness, N);

    imageStore(outputImage, pixel, vec4(outputColor, 1.0));
}