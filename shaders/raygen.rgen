// Ray generation shader
#version 460
#extension GL_NV_ray_tracing : require

layout(location = 0) rayPayloadNV vec4 payload;
layout(binding = 0, set = 0) uniform accelerationStructureNV acc;
layout(binding = 1, rgba8) uniform image2D img;
layout(binding = 2, std140, set = 0) uniform rayParams
{
    mat4 viewInverse;
    mat4 projInverse;
    vec3 rayOrigin;
    //uint sbtOffset;
    //uint sbtStride;
    //uint missIndex;
};

vec3 computeDir() {
    const vec2 pixel = vec2(gl_LaunchIDNV.x + 0.5, gl_LaunchIDNV.y + 0.5);
    const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;
    vec4 target = viewInverse * projInverse * (vec4(uv.x, uv.y, 0.0, 1.0));
    vec3 dir = target.xyz / target.w - rayOrigin;
    return normalize(dir);
}
/*
vec3 computeDir() {
    return vec3(-1.0, 0.0, 0.0);
}

vec3 computeOrigin() {
    const vec2 pixel = vec2(gl_LaunchIDNV.x + 0.5, gl_LaunchIDNV.y + 0.5);
    const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;
    return vec3(1.0, uv.x, uv.y); // between -1 and 1 in y and z direction
}
*/
void main() {
    //traceRayEXT(acc, gl_RayFlagsOpaqueEXT, 0xff, sbtOffset,
    //            sbtStride, missIndex, rayOrigin, 0.0,
    //            computeDir(rayDir, gl_LaunchIDNV, gl_LaunchSizeNV),
    //            100.0f, 0 /* payload */);
    traceNV(acc, gl_RayFlagsOpaqueNV, 0xff,
                0, //sbtOffset,
                0, // sbtStride,
                0, //missIndex,
                rayOrigin,
                0.0001,
                computeDir(),
                1000.0,
                0 /* payload */);
    imageStore(img, ivec2(gl_LaunchIDNV), payload);
    //imageStore(img, ivec2(gl_LaunchIDEXT), vec4(0.3922, 0.5843, 0.9294, 1.0));
}