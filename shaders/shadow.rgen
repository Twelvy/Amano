// Ray generation shader
// computes the shadow
#version 460
#extension GL_NV_ray_tracing : require

layout(location = 0) rayPayloadNV vec4 payload;
layout(binding = 0, set = 0) uniform accelerationStructureNV acc;
layout(binding = 1, rgba32f) uniform image2D outputImage;
layout(binding = 2, std140, set = 0) uniform rayParams
{
    mat4 viewInverse;
    mat4 projInverse;
    vec3 rayOrigin;
};
layout(binding = 3) uniform sampler2D depthSampler;
layout(binding = 4) uniform sampler2D worldNormalSampler;
layout(binding = 5) uniform sampler2D albedoSampler;
layout(binding = 6, std140, set = 0) uniform lightInformation
{
    vec3 lightPosition;
};

vec4 getLightIntensity(vec3 origin, vec3 target, vec3 normal) {
    vec3 direction = target - origin;
    vec4 lightIntensity = vec4(0.0, 0.0, 0.0, 1.0);
    if (dot(normal, direction) > 0.0) {
        payload = vec4(1.0, 1.0, 1.0, 1.0);
        float maxLength = length(direction);
        traceNV(acc,
                gl_RayFlagsOpaqueNV | gl_RayFlagsTerminateOnFirstHitNV,
                0xff,
                0,
                0,
                0,
                origin,
                0.001,
                normalize(direction),
                maxLength,
                0);
        lightIntensity = payload;
    }
    return lightIntensity;
}

void main() {
    const vec2 uv = (vec2(gl_LaunchIDNV.xy) + vec2(0.5)) / vec2(gl_LaunchSizeNV.xy);
    const vec2 pixel = vec2(gl_LaunchIDNV.x + 0.5, gl_LaunchIDNV.y + 0.5);
    vec2 clipPosition = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;
    const float depth = texture(depthSampler, uv).x;

    vec4 lightIntensity = vec4(1.0, 1.0, 1.0, 1.0);

    if (depth > 0.0 && depth < 1.0) {
        const vec3 worldNormal = texture(worldNormalSampler, uv).xyz;
        vec4 worldPosition = viewInverse * projInverse * vec4(clipPosition.xy, depth, 1.0);
        vec3 origin = worldPosition.xyz / worldPosition.w;
        
        lightIntensity = getLightIntensity(origin, lightPosition, worldNormal);
    }
    else {
        lightIntensity = vec4(1.0, 1.0, 1.0, 1.0);
    }

    vec4 albedo = texture(albedoSampler, uv);
    imageStore(outputImage, ivec2(gl_LaunchIDNV), lightIntensity * albedo);
}
